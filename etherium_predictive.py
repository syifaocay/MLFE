# -*- coding: utf-8 -*-
"""etherium_Predictive.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s52kKpOryVAB1DhF9uP6UR5fOdHL3u5-

# **Data Loading**

**import Library**
"""

# Commented out IPython magic to ensure Python compatibility.
import zipfile, math
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn import metrics
from sklearn import preprocessing
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor

from google.colab import files

df = pd.read_csv('/content/coin_Ethereum.csv')
df.sort_values(by=['Date'], inplace=True, ascending=True)
df.set_index('Date', inplace= True)
df

"""# **Exploratory Data Analysis**"""

df.info()

df.drop(['SNo', 'Name', 'Symbol', 'Volume','Marketcap'],axis=1,inplace=True)
df['OHLC_Average'] = (df['Open'] + df['High'] + df['Low'] + df['Close']) / 4
df

df.describe()

df['Price_After_Month']=df['Close'].shift(-30)

df.tail()

"""# **Menangani Missing Value dan Outlier**

"""

df.isnull().sum()
#df.isna().sum()

"""Dari hasil prediksi diatas, tidak terdapat Missing Value pada setiap variabel


"""

plt.subplots(figsize=(10,7))
sns.boxplot(data=df).set_title("ethereum")
plt.show()

"""diatas, terdapat beberapa outlier pada variabel

"""

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3-Q1
df=df[~((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]

df.shape

"""Untuk mengatasi Outlier, maka memerlukan penentuan batas atas dan bawah nilai quartil pada data

**Univariate Analysis**

menganalisis Numerical Features pada dataset dengan menampilkan plot dan grafik
"""

df.hist(bins=50, figsize=(20,15))
plt.show()

"""**Multivariate Analysis**

menganalisis Numerical Features pada dataset dengan menampilkan plot dan grafik relasinya
"""

sns.pairplot(df, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = df.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""berdasarkan tabel diatas dapat disimpulkan bahwa nilai korelasi antar variabel bernilai lebih dari 0.8 atau mendekati 1.

# **Data Preparation**

**Train Test Split**
"""

X = df.drop('Price_After_Month',axis=1)
y = df['Price_After_Month']

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8, test_size = 0.2, random_state = 100)

print(f'dataset: {len(X)}')
print(f'train dataset: {len(X_train)}')
print(f'test dataset: {len(X_test)}')

"""**Standarisasi**"""

numerical_features = ['High', 'Low', 'Open']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""**Model Development**"""

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""**K-Nearest Neighbor**"""

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_train)

"""**Random Forest**"""

RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""**Boosting Algorithm**"""

boosting = AdaBoostRegressor(n_estimators=50, learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""# **Evaluasi Model**

**Mengukur seberapa kecil nilai error MSE**
"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Dari gambar di atas, terlihat bahwa, KNN memberikan nilai eror yang paling kecil.

# **Menghitung nilai akurasi model**
"""

knn_accuracy = knn.score(X_test, y_test)*100
rf_accuracy = RF.score(X_test, y_test)*100
boosting_accuracy = boosting.score(X_test, y_test)*100

list_evaluasi = [[knn_accuracy],
            [rf_accuracy],
            [boosting_accuracy]]
evaluasi = pd.DataFrame(list_evaluasi,
                        columns=['Accuracy (%)'],
                        index=['K-Nearest Neighbor', 'Random Forest', 'Boosting'])
evaluasi

"""Dari hasil evaluasi di atas dapat memberikan informasi bahwa Model KNN memiliki tingkat akurasi yang paling tinggi"""

X_30=X[-30:]
forecast=knn.predict(X_30)

df1=pd.DataFrame(forecast,columns=['Forecast'])
df1=df.append(df1)
df1.drop(['High', 'Low', 'Open'],axis=1,inplace=True)

df1.tail(35)

"""Berikut adalah nilai prediksi 30 hari kedepan yang didapat dari metode terbaik yaitu KNN yang dievaluasikan sebelumnya."""